import pytest
from string_utils import StringUtils

# Делает первую букву заглавной:


@pytest.mark.parametrize('in_, out_', [
    # 1. Строка с текстом:
    ('тест', 'Тест'),
    # 2. Цифры в строке:
    ('456', '456'),
    # 3. Строка с пробелами и цифрами:
    ('29 января 1996', '29 января 1996'),
    # 4. Пустая строка:
    ('', ''),
    # 5. Стока, содержащая только пробел:
    (' ', ' '),
    # 6. Первая буква заглавная:
    ('Тест', 'Тест'),
    # 7. Специальные символы:
    ('><!"№%:,.;()_+=-§±[]~`', '><!"№%:,.;()_+=-§±[]~`'),
    # 8. Первый символ пробел:
    (' тест', ' тест')
])
def test_capitilize(in_, out_):
    assert StringUtils().capitilize(in_) == out_

# Удаляет лишние пробелы в начале:


@pytest.mark.parametrize('in_, out_', [
    # 9. Несколько пробелов в начале и в конце:
    ('   тест  ', 'тест  '),
    # 10. Нет пробелов в начале:
    ('тест', 'тест'),
    # 11. Цифры в строке:
    ('456', '456'),
    # 12. Строка с пробелами в середине и цифрами:
    ('29 января 1996', '29 января 1996'),
    # 13. Пустая строка:
    ('', ''),
    # 14. Стока, содержащая только пробел:
    (' ', ''),
    # 15. Строка, содержащая только несколько пробелов:
    ('   ', '')
])
def test_trim(in_, out_):
    assert StringUtils().trim(in_) == out_

# Превращает текст с разделителями в список:


@pytest.mark.parametrize('in_, out_, delimeter', [
    # 16. Строка, содержащая только разделитель:
    ('±', ['', ''], '±'),
    # 17. Текст с разделителем &:
    ('т&е&с&т', ["т", "е", "с", "т"], '&'),
    # 18. Цифры и разделитель состит из нескольких символов:
    ('4+-5+-6', ['4', '5', '6'], "+-"),
    # 19. Буквы и цифры, а разделителем служит пробел:
    ('29 января 1996', ['29', 'января', '1996'], ' '),
    # 20. Пустая строка без разделителей:
    ('', [], ''),
    # 21. Стока, содержащая только пробел:
    (' ', [' '], '0'),
    # 22. Строка, не содержащая указанный разделитель:
    ('бла бла, буль буль', ['бла бла, буль буль'], '$')
])
def test_to_list(in_, out_, delimeter):
    assert StringUtils().to_list(in_, delimeter) == out_

# Определение наличия указанного символа в строке:


@pytest.mark.parametrize('in_, out_, symbol', [
    # 23. Текст содержит символ:
    ('тест', True, 'е'),
    # 24. Строка с числом содержит цифру:
    ('456', True, '5'),
    # 25. Строка с пробелами и цифрами:
    ('29 января 1996', True, '19'),
    # 26. Пустая строка:
    ('', False, 'Ж'),
    # 27. Стока, содержащая только пробел:
    (' ', True, ' '),
    # 28. Искомый символ - это пустая строка:
    ('тест', True, ''),
])
def test_contains(in_, symbol, out_):
    assert StringUtils().contains(in_, symbol) == out_

# Удаление подстроки из строки:


@pytest.mark.parametrize('in_, symbol, out_', [
    # 29. Цифры в строке:
    ('456', '6', '45'),
    # 30. Строка с пробелами и цифрами:
    ('29 января 1996', ' ', '29января1996'),
    # 31. Пустая строка:
    ('', '', ''),
    # 32. Стока, содержащая только пробел:
    (' ', ' ', ''),
    # 33. Строка с текстом:
    ('тест', 'ст', 'те')
])
def test_delete_symbol(in_, symbol, out_):
    assert StringUtils().delete_symbol(in_, symbol) == out_

# Определяет совпадение первого символа строки с введённым символом:


@pytest.mark.parametrize('in_, symbol, out_', [
    # 34. Строка с текстом, не тот регистр:
    ('тест', 'Т', False),
    # 35. Цифры в строке:
    ('456', '4', True),
    # 36. Строка с пробелами и цифрами, несколько символов:
    ('29 января 1996', '29', True),
    # 37. Пустая строка:
    ('', '', True),
    # 38. Стока, содержащая только пробел:
    (' ', ' ', True),
    # 39. Строка с текстом:
    ('тест', 'т', True),
])
def test_starts_with(in_, symbol, out_):
    assert StringUtils().starts_with(in_, symbol) == out_

# Определяет совпадение последнего символа строки с указанным символом:


@pytest.mark.parametrize('in_, symbol, out_', [
    # 40. Строка с текстом, не тот регистр:
    ('тест', 'Т', False),
    # 41. Строка с текстом, неверный символ:
    ('тест', 'W', False),
    # 42. Цифры в строке:
    ('456', '6', True),
    # 43. Строка с пробелами и цифрами, несколько символов:
    ('29 января 1996', '96', True),
    # 44. Пустая строка:
    ('', '', True),
    # 45. Стока, содержащая только пробел:
    (' ', ' ', True),
    # 46. Строка, содержащая один символ:
    ('й', 'й', True),
    # 47. Строка с текстом:
    ('тест', 'т', True),
])
def test_end_with(in_, symbol, out_):
    assert StringUtils().end_with(in_, symbol) == out_

# Определение наличия каких-либо символов в строке (True, если строка пуста):


@pytest.mark.parametrize('in_, out_', [
    # 48. Цифры в строке:
    ('456', False),
    # 49. Строка с пробелами и цифрами:
    ('29 января 1996', False),
    # 50. Пустая строка:
    ('', True),
    # 51. Стока, содержащая только пробелы (несколько):
    ('  ', False),
    # 52. Специальный символ:
    ('_', False),
    # 53. Строка с текстом:
    ('тест', False)
])
def test_is_empty(in_, out_):
    assert StringUtils().is_empty(in_) == out_

# Превращение списка в строку с указанным разделителем:


@pytest.mark.parametrize('in_, joiner, out_', [
    # 54. Разделитель - пустая строка:
    (['Те', 'ст'], '', 'Тест'),
    # 55. Пустой список:
    ([], '', ''),
    # 56. Список из чисел:
    ([40, 55, 60], '-', '40-55-60'),
    # 57. Список из цифр и букв, разделителем выступает пробел:
    ([29, 'января', 1996], ' ', '29 января 1996'),
    # 58. Список, содержащий пустые и непустые строки:
    (['', 'тест'], '*', '*тест'),
    # 59. Список только из пустых строк:
    (['', ''], '|', '|')
])
def test_list_to_string(in_, out_, joiner):
    assert StringUtils().list_to_string(in_, joiner) == out_
